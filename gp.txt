individual := {fitness, genome}

genome := set of all actions performed (up, down, a, b, etc...)
          perhaps represented as a string (ex. 01000030000020001010)

population := set of all individuals

<search loop> ::: An evolutionary search loop

  for every generation:
    choose parents through <tournament selection>

    generate new population through <crossover>

    modify each individual through <mutation>

    replace the worst performing individuals in the old population with the best performing ones in the new population

  return the best performing individual


<tournament selection>
  generate winners (same size as population):
    randomly select competitors

    FIGHT (compare fitness)

    select best solution (the winner)

  return the winners


<crossover>
  if randomized probability < crossover probability:
    generate 2 children:
      pick crossover point (a subset of actions the individual performed) for each parent 

      swap!

    return children

<mutation>
  if randomized probability < mutation probability:
    pick mutation point (again a subset of actions the individual performed)

    randomly generate new subset of actions and replace at mutation point
    
